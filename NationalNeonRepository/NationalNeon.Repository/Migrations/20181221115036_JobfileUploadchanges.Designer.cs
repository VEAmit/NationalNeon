// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NationalNeon.Repository.DB;
using System;

namespace NationalNeon.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181221115036_JobfileUploadchanges")]
    partial class JobfileUploadchanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NationalNeon.Repository.DB.Department", b =>
                {
                    b.Property<int>("departmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("created_by");

                    b.Property<DateTime>("created_on");

                    b.Property<string>("departmentname")
                        .IsRequired();

                    b.Property<string>("description")
                        .IsRequired();

                    b.Property<string>("updated_by");

                    b.Property<DateTime>("updated_on");

                    b.HasKey("departmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("NationalNeon.Repository.DB.Job", b =>
                {
                    b.Property<int>("jobId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("created_by");

                    b.Property<DateTime>("created_on");

                    b.Property<string>("description");

                    b.Property<string>("fileName");

                    b.Property<string>("job_name");

                    b.Property<int>("job_number");

                    b.Property<decimal>("revenue");

                    b.Property<string>("sales_person");

                    b.Property<DateTime>("scheduled_date");

                    b.Property<string>("status");

                    b.Property<DateTime>("target_completion_date");

                    b.Property<string>("updated_by");

                    b.Property<DateTime>("updated_on");

                    b.HasKey("jobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("NationalNeon.Repository.DB.JobFileUpload", b =>
                {
                    b.Property<int>("JobFileUploadId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FilePath");

                    b.Property<int?>("JobId");

                    b.HasKey("JobFileUploadId");

                    b.HasIndex("JobId")
                        .IsUnique()
                        .HasFilter("[JobId] IS NOT NULL");

                    b.ToTable("JobFileUploads");
                });

            modelBuilder.Entity("NationalNeon.Repository.DB.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BudgetedHours");

                    b.Property<int>("Completed");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Employee");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTime>("TargetCompletionDate");

                    b.Property<string>("TaskName")
                        .IsRequired();

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<int?>("departmentId");

                    b.Property<int?>("jobId");

                    b.Property<int?>("userId");

                    b.HasKey("TaskId");

                    b.HasIndex("departmentId");

                    b.HasIndex("jobId");

                    b.HasIndex("userId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("NationalNeon.Repository.DB.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("created_by");

                    b.Property<DateTime>("created_on");

                    b.Property<string>("password");

                    b.Property<DateTime>("reset_expiry_date");

                    b.Property<Guid>("reset_me_guid");

                    b.Property<string>("role");

                    b.Property<int>("unsuccesful_login_attempt");

                    b.Property<string>("updated_by");

                    b.Property<DateTime>("updated_on");

                    b.Property<string>("username");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NationalNeon.Repository.DB.JobFileUpload", b =>
                {
                    b.HasOne("NationalNeon.Repository.DB.Job", "Job")
                        .WithOne("JobFileUpload")
                        .HasForeignKey("NationalNeon.Repository.DB.JobFileUpload", "JobId");
                });

            modelBuilder.Entity("NationalNeon.Repository.DB.Task", b =>
                {
                    b.HasOne("NationalNeon.Repository.DB.Department", "Department")
                        .WithMany("Tasks")
                        .HasForeignKey("departmentId");

                    b.HasOne("NationalNeon.Repository.DB.Job", "Job")
                        .WithMany("Tasks")
                        .HasForeignKey("jobId");

                    b.HasOne("NationalNeon.Repository.DB.User", "User")
                        .WithMany()
                        .HasForeignKey("userId");
                });
#pragma warning restore 612, 618
        }
    }
}
